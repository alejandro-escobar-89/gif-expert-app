{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","id","onSubmit","e","preventDefault","sanitizedValue","trim","categories","type","name","placeholder","value","onChange","target","className","GifGridItem","image","src","url","alt","title","width","height","getGifs","category","a","fetch","encodeURI","response","json","data","map","gifData","images","downsized","useFetchGifs","loading","state","setState","useEffect","then","gifs","setTimeout","GifGrid","gif","GifExpertApp","ReactDom","render","document","getElementById"],"mappings":"0QAwCeA,EApCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,uBAAMC,GAAG,uBAAuBC,SAZX,SAACC,GACtBA,EAAEC,iBACF,IAAMC,EAAiBN,EAAWO,OAE9BD,GACAR,GAAc,SAACU,GAAD,OAAiBF,GAAjB,mBAAoCE,OAGtDP,EAAc,KAId,UACI,uBACIQ,KAAK,SACLP,GAAG,kBACHQ,KAAK,kBACLC,YAAY,kBACZC,MAAOZ,EACPa,SArBuB,SAACT,GAAD,OAAOH,EAAcG,EAAEU,OAAOF,UAwBzD,uBAAOH,KAAK,SAASP,GAAG,mBAAmBa,UAAU,kBAAkBH,MAAM,qBCV1EI,G,YAjBK,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAClB,OACI,yBAAQf,GAAIe,EAAMf,GAAIa,UAAU,sCAAhC,UACI,qBAAKG,IAAKD,EAAME,IAAKC,IAAKH,EAAMI,MAAOC,MAAM,MAAMC,OAAO,QAC1D,qCAAaN,EAAMI,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,4DACJ,mCACD,GAFK,SAGIC,MAAM,gDAAD,OAFb,mCAEa,cAA6DC,UAAUH,GAAvE,kBADd,KAFK,cAGbI,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAJY,kBAMZA,EAAKC,KAAI,SAAAC,GAAO,MAAK,CACxB/B,GAAI+B,EAAQ/B,GACZmB,MAAOY,EAAQZ,MACfF,IAAKc,EAAQC,OAAOC,UAAUhB,SATf,4CAAH,sDCuBLiB,EApBM,SAAAX,GACjB,MAA0B1B,mBAAS,CAC/BgC,KAAM,GACNM,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNhB,EAAQC,GAAUgB,MAAK,SAAAC,GACnBC,YAAW,WACPJ,EAAS,CACLR,KAAMW,EACNL,SAAS,MAEd,UAER,IAEIC,GCGIM,EAlBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACd,EAA8BW,EAAaX,GAA9BiB,EAAb,EAAOX,KAAYM,EAAnB,EAAmBA,QAEnB,OACI,sBAAKtB,UAAU,WAAf,UACI,mBAAGA,UAAU,WAAb,SAAyBU,IAExBY,GAAW,mBAAGtB,UAAU,0EAAb,wBAEZ,qBAAKA,UAAU,SAAf,SAAyB2B,EAAKV,KAAI,SAAAa,GAAG,OAAK,cAAC,EAAD,CAA0B5B,MAAO4B,GAAfA,EAAI3C,aCI7D4C,EAdM,WACjB,MAAoC/C,mBAAS,IAA7C,mBAAOS,EAAP,KAAmBV,EAAnB,KAEA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAECU,EAAWwB,KAAI,SAAAP,GAAQ,OAAK,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,UCTvDsB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.676a7285.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport './AddCategory.css';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleCategorySearchChange = (e) => setInputValue(e.target.value);\r\n\r\n    const handleFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        const sanitizedValue = inputValue.trim();\r\n\r\n        if (sanitizedValue) {\r\n            setCategories((categories) => [sanitizedValue, ...categories]);\r\n        }\r\n\r\n        setInputValue('');\r\n    };\r\n\r\n    return (\r\n        <form id=\"category_search_form\" onSubmit={handleFormSubmit}>\r\n            <input\r\n                type=\"search\"\r\n                id=\"category_search\"\r\n                name=\"category_search\"\r\n                placeholder=\"Type a category\"\r\n                value={inputValue}\r\n                onChange={handleCategorySearchChange}\r\n            />\r\n\r\n            <input type=\"submit\" id=\"add_category_btn\" className=\"btn btn-primary\" value=\"Add category\"/>\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;","import PropTypes from 'prop-types';\r\nimport 'animate.css';\r\nimport './GifGridItem.css';\r\n\r\nconst GifGridItem = ({image}) => {\r\n    return (\r\n        <figure id={image.id} className=\"animate__animated animate__bounceIn\">\r\n            <img src={image.url} alt={image.title} width=\"100\" height=\"100\" />\r\n            <figcaption>{image.title}</figcaption>\r\n        </figure>\r\n    );\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n    image: PropTypes.shape({\r\n        id: PropTypes.string,\r\n        title: PropTypes.string,\r\n        url: PropTypes.string,\r\n    }).isRequired,\r\n};\r\n\r\nexport default GifGridItem;","export const getGifs = async (category) => {\r\n    const apiKey = 'd0RlG1eP43hGL126o5oqm0xyY2WTk4T6';\r\n    const limit = 10;\r\n    const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=${limit}`);\r\n    const {data} = await response.json();\r\n\r\n    return data.map(gifData => ({\r\n        id: gifData.id,\r\n        title: gifData.title,\r\n        url: gifData.images.downsized.url,\r\n    }));\r\n};","import { useState, useEffect } from 'react';\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nconst useFetchGifs = category => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(gifs => {\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: gifs,\r\n                    loading: false,\r\n                });\r\n            }, 2000);\r\n        });\r\n    }, []);\r\n\r\n    return state;\r\n};\r\n\r\nexport default useFetchGifs;","import PropTypes from 'prop-types';\r\nimport GifGridItem from './GifGridItem';\r\nimport './GifGrid.css';\r\nimport useFetchGifs from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({category}) => {\r\n    const {data: gifs, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <div className=\"gif-grid\">\r\n            <p className=\"category\">{category}</p>\r\n\r\n            {loading && <p className=\"loader animate__animated animate__flash animate__infinite animate__slow\">Loading...</p>}\r\n\r\n            <div className=\"images\">{gifs.map(gif => (<GifGridItem key={gif.id} image={gif}/>))}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifGrid;","import { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h2>GIF Expert App</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            {categories.map(category => (<GifGrid key={category} category={category}/>))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","import ReactDom from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDom.render(<GifExpertApp />, document.getElementById('root'));"],"sourceRoot":""}